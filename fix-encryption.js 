const fs = require('fs').promises;
const path = require('path');

async function fixEncryptionIssues() {
    console.log('üîß Fixing encryption issues...');
    
    const dataPath = './data';
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        await fs.access(dataPath);
    } catch (error) {
        console.log('‚úÖ No data directory found - nothing to fix.');
        return;
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const databases = await fs.readdir(dataPath);
        
        for (const dbName of databases) {
            const dbPath = path.join(dataPath, dbName);
            const stat = await fs.stat(dbPath);
            
            if (stat.isDirectory()) {
                console.log(`\nüìÅ Processing database: ${dbName}`);
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                const collections = await fs.readdir(dbPath);
                
                for (const collectionName of collections) {
                    const collectionPath = path.join(dbPath, collectionName);
                    const collectionStat = await fs.stat(collectionPath);
                    
                    if (collectionStat.isDirectory()) {
                        console.log(`  üìÇ Processing collection: ${collectionName}`);
                        
                        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–Ω–¥–µ–∫—Å–æ–≤
                        const files = await fs.readdir(collectionPath);
                        const indexFiles = files.filter(f => f.startsWith('_index_') && f.endsWith('.bson'));
                        
                        for (const indexFile of indexFiles) {
                            try {
                                await fs.unlink(path.join(collectionPath, indexFile));
                                console.log(`    ‚úÖ Deleted: ${indexFile}`);
                            } catch (error) {
                                console.log(`    ‚ùå Could not delete ${indexFile}: ${error.message}`);
                            }
                        }
                        
                        // –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å
                        try {
                            await fs.unlink(path.join(collectionPath, '_index.bson'));
                            console.log(`    ‚úÖ Deleted main index`);
                        } catch (error) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
                        }
                    }
                }
            }
        }
        
        console.log('\nüéâ All encryption issues fixed!');
        console.log('üí° The server will recreate indexes automatically on next startup.');
        
    } catch (error) {
        console.error('‚ùå Error fixing encryption issues:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    fixEncryptionIssues();
}

module.exports = fixEncryptionIssues;