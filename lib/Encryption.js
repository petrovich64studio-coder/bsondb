const crypto = require('crypto');

class Encryption {
    constructor(key = null) {
        this.enabled = false;
        this.key = null;
        this.algorithm = 'aes-256-cbc';
        this.ivLength = 16;

        if (key && key !== 'default-encryption-key') {
            this.enabled = true;
            this.key = crypto.createHash('sha256').update(String(key)).digest();
            console.log('üîê Encryption: Enabled');
        } else {
            console.log('üîì Encryption: Disabled (no valid key provided)');
        }
    }

    encrypt(data) {
        // –ï—Å–ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
        if (!this.enabled) {
            return data;
        }

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π IV
            const iv = crypto.randomBytes(this.ivLength);
            
            // –°–æ–∑–¥–∞–µ–º cipher
            const cipher = crypto.createCipheriv(this.algorithm, this.key, iv);
            
            // –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            let encrypted = cipher.update(data);
            encrypted = Buffer.concat([encrypted, cipher.final()]);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º IV + encrypted data
            return Buffer.concat([iv, encrypted]);
        } catch (error) {
            console.error('‚ùå Encryption failed:', error.message);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return data;
        }
    }

    decrypt(encryptedData) {
        // –ï—Å–ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
        if (!this.enabled) {
            return encryptedData;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ –¥–ª—è IV
            if (!encryptedData || encryptedData.length < this.ivLength) {
                console.warn('‚ö†Ô∏è Invalid encrypted data length, returning as-is');
                return encryptedData;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º IV (–ø–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç)
            const iv = encryptedData.slice(0, this.ivLength);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–∞–π—Ç—ã)
            const encrypted = encryptedData.slice(this.ivLength);
            
            // –°–æ–∑–¥–∞–µ–º decipher
            const decipher = crypto.createDecipheriv(this.algorithm, this.key, iv);
            
            // –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            let decrypted = decipher.update(encrypted);
            decrypted = Buffer.concat([decrypted, decipher.final()]);
            
            return decrypted;
        } catch (error) {
            console.error('‚ùå Decryption failed:', error.message);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
            return encryptedData;
        }
    }

    encryptText(text) {
        if (!this.enabled) {
            return text;
        }

        try {
            const buffer = Buffer.from(text, 'utf8');
            const encrypted = this.encrypt(buffer);
            return encrypted.toString('base64');
        } catch (error) {
            console.error('‚ùå Text encryption failed:', error.message);
            return text;
        }
    }

    decryptText(encryptedText) {
        if (!this.enabled) {
            return encryptedText;
        }

        try {
            const buffer = Buffer.from(encryptedText, 'base64');
            const decrypted = this.decrypt(buffer);
            return decrypted.toString('utf8');
        } catch (error) {
            console.error('‚ùå Text decryption failed:', error.message);
            return encryptedText;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    test() {
        if (!this.enabled) {
            console.log('üîì Encryption test: Disabled');
            return true;
        }

        try {
            const testData = 'Hello, BsonDB Encryption Test!';
            const encrypted = this.encryptText(testData);
            const decrypted = this.decryptText(encrypted);
            
            if (decrypted !== testData) {
                throw new Error('Encryption/decryption mismatch');
            }
            
            console.log('‚úÖ Encryption test passed');
            return true;
        } catch (error) {
            console.error('‚ùå Encryption test failed:', error.message);
            return false;
        }
    }

    isEnabled() {
        return this.enabled;
    }
}

module.exports = Encryption;